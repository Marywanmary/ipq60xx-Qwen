name: ipq60xx-Qwen

on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Select compile branch (all means all)'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - openwrt
        - immortalwrt
        - libwrt
      target_config:
        description: 'Select config type (all means all)'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - Pro
        - Max
        - Ultra

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  WORKFLOW_NAME: "ipq60xx-Qwen"
  TARGET_CHIP: "ipq60xx"
  CACHE_KEY: "openwrt-${{ github.sha }}"
  CACHE_VERSION: "v1"
  BUILD_DIR: "/home/runner/openwrt-build"
  TEMP_DIR: "/home/runner/temp"
  LOG_DIR: "/home/runner/logs"
  CCACHE_DIR: "/home/runner/.ccache"
  DL_DIR: "/home/runner/dl"
  STAGING_DIR: "/home/runner/staging"
  SCRIPTS_DIR: "${{ github.workspace }}/scripts"
  
jobs:
  prepare:
    runs-on: ubuntu-22.04
    outputs:
      build_matrix: ${{ steps.matrix.outputs.build_matrix }}
    steps:
    - name: Output start info
      run: |
        echo "=== Prepare build matrix ==="
        echo "Branch: ${{ inputs.target_branch }}"
        echo "Config: ${{ inputs.target_config }}"
        
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Prepare work directory
      run: |
        mkdir -p ${{ env.BUILD_DIR }} ${{ env.TEMP_DIR }} ${{ env.LOG_DIR }} ${{ env.CCACHE_DIR }} ${{ env.DL_DIR }} ${{ env.STAGING_DIR }}
        echo "Work directory prepared"
        
    - name: Generate build matrix
      id: matrix
      run: |
        # Read input parameters
        TARGET_BRANCH="${{ inputs.target_branch }}"
        TARGET_CONFIG="${{ inputs.target_config }}"
        
        # Define branch info
        declare -A BRANCHES
        BRANCHES["openwrt"]="https://github.com/laipeng668/openwrt.git:master:openwrt"
        BRANCHES["immortalwrt"]="https://github.com/laipeng668/immortalwrt.git:master:immwrt"
        BRANCHES["libwrt"]="https://github.com/laipeng668/openwrt-6.x.git:k6.12-nss:libwrt"
        
        # Build matrix
        MATRIX="["
        FIRST=true
        
        # Determine branches to build
        if [ "$TARGET_BRANCH" = "all" ]; then
          BRANCHES_TO_BUILD=("openwrt" "immortalwrt" "libwrt")
        else
          BRANCHES_TO_BUILD=("$TARGET_BRANCH")
        fi
        
        # Determine configs to build
        if [ "$TARGET_CONFIG" = "all" ]; then
          CONFIGS_TO_BUILD=("Ultra" "Max" "Pro")  # Order Ultra, Max, Pro to maximize cache hit
        else
          CONFIGS_TO_BUILD=("$TARGET_CONFIG")
        fi
        
        for branch in "${BRANCHES_TO_BUILD[@]}"; do
          if [ -n "${BRANCHES[$branch]}" ]; then
            IFS=':' read -r repo_url repo_branch repo_short <<< "${BRANCHES[$branch]}"
            
            for config in "${CONFIGS_TO_BUILD[@]}"; do
              if [ $FIRST = true ]; then
                FIRST=false
              else
                MATRIX+=","
              fi
              MATRIX+="{\"branch\":\"$branch\",\"repo_url\":\"$repo_url\",\"repo_branch\":\"$repo_branch\",\"repo_short\":\"$repo_short\",\"config\":\"$config\"}"
            done
          fi
        done
        
        MATRIX+="]"
        echo "build_matrix=$MATRIX" >> $GITHUB_OUTPUT
        echo "Build matrix: $MATRIX"
        
  build:
    needs: prepare
    runs-on: ubuntu-22.04
    strategy:
      matrix: ${{ fromJson(needs.prepare.outputs.build_matrix) }}
      max-parallel: 3
    steps:
    - name: Output compile info
      run: |
        echo "=== Start compile ==="
        echo "Branch: ${{ matrix.branch }}"
        echo "Repo: ${{ matrix.repo_url }}"
        echo "Branch: ${{ matrix.repo_branch }}"
        echo "Short: ${{ matrix.repo_short }}"
        echo "Config: ${{ matrix.config }}"
        
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup compile environment
      run: |
        echo "Setup compile environment..."
        sudo apt-get update
        sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3-pip python3-pyelftools rsync unzip zlib1g-dev file wget subversion patch cmake squashfs-tools cpio
        echo "Compile environment setup complete"
        
    - name: Restore CCache
      uses: actions/cache@v4
      with:
        path: ${{ env.CCACHE_DIR }}
        key: ccache-${{ env.CACHE_VERSION }}-${{ matrix.repo_short }}-${{ matrix.config }}-${{ env.CACHE_KEY }}
        restore-keys: |
          ccache-${{ env.CACHE_VERSION }}-${{ matrix.repo_short }}-${{ matrix.config }}-
          ccache-${{ env.CACHE_VERSION }}-${{ matrix.repo_short }}-
          ccache-${{ env.CACHE_VERSION }}-
          
    - name: Restore DL
      uses: actions/cache@v4
      with:
        path: ${{ env.DL_DIR }}
        key: dl-${{ env.CACHE_VERSION }}-${{ matrix.repo_short }}-${{ env.CACHE_KEY }}
        restore-keys: |
          dl-${{ env.CACHE_VERSION }}-${{ matrix.repo_short }}-
          dl-${{ env.CACHE_VERSION }}-
          
    - name: Restore STAGING
      uses: actions/cache@v4
      with:
        path: ${{ env.STAGING_DIR }}
        key: staging-${{ env.CACHE_VERSION }}-${{ matrix.repo_short }}-${{ matrix.config }}-${{ env.CACHE_KEY }}
        restore-keys: |
          staging-${{ env.CACHE_VERSION }}-${{ matrix.repo_short }}-${{ matrix.config }}-
          staging-${{ env.CACHE_VERSION }}-${{ matrix.repo_short }}-
          staging-${{ env.CACHE_VERSION }}-
          
    - name: Check cache status
      run: |
        echo "=== Check cache status ==="
        echo "CCache dir size: $(du -sh ${{ env.CCACHE_DIR }} | cut -f1)"
        echo "DL dir size: $(du -sh ${{ env.DL_DIR }} | cut -f1)"
        echo "Staging dir size: $(du -sh ${{ env.STAGING_DIR }} | cut -f1)"
        
    - name: Clone OpenWrt source
      run: |
        echo "Start clone ${{ matrix.repo_url }} branch ${{ matrix.repo_branch }}"
        git clone --depth 1 --branch ${{ matrix.repo_branch }} ${{ matrix.repo_url }} ${{ env.BUILD_DIR }}
        cd ${{ env.BUILD_DIR }}
        echo "Source clone complete"
        
    - name: Initialize feeds
      run: |
        cd ${{ env.BUILD_DIR }}
        echo "Initialize feeds..."
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        echo "Feeds initialize complete"
        
    - name: Prepare config file
      run: |
        cd ${{ env.BUILD_DIR }}
        echo "Prepare config file..."
        
        # Merge config files - chip config > branch config > package config
        cat $GITHUB_WORKSPACE/configs/${{ env.TARGET_CHIP }}_base.config > .config
        if [ -f "$GITHUB_WORKSPACE/configs/${{ matrix.repo_short }}_base.config" ]; then
            cat $GITHUB_WORKSPACE/configs/${{ matrix.repo_short }}_base.config >> .config
        fi
        cat $GITHUB_WORKSPACE/configs/${{ matrix.config }}.config >> .config
        
        # Save original config for debug
        cp .config ${{ env.LOG_DIR }}/${{ matrix.repo_short }}-${{ env.TARGET_CHIP }}-raw-${{ matrix.config }}.config
        
        echo "Config file prepare complete"
        echo "Final config file content:"
        head -20 .config
        
    - name: Get device list
      id: devices
      run: |
        cd ${{ env.BUILD_DIR }}
        echo "Get device list..."
        
        # Extract device names from config file
        DEVICES=$(grep -oP 'CONFIG_TARGET_DEVICE_.*?_DEVICE_\K[^=]*' .config | grep -v 'PACKAGES' | sort -u)
        echo "Detected devices: $DEVICES"
        
        # Save device list to output
        echo "devices=$DEVICES" >> $GITHUB_OUTPUT
        
    - name: Configure compile options
      run: |
        cd ${{ env.BUILD_DIR }}
        echo "Configure compile options..."
        
        # Set environment variables
        export CCACHE_DIR=${{ env.CCACHE_DIR }}
        export DL_DIR=${{ env.DL_DIR }}
        export STAGING_DIR=${{ env.STAGING_DIR }}
        
        # Execute pre-make menuconfig
        make defconfig
        
        echo "Compile options configure complete"
        
    - name: Compile firmware
      run: |
        cd ${{ env.BUILD_DIR }}
        echo "Start compile firmware..."
        
        # Set environment variables
        export CCACHE_DIR=${{ env.CCACHE_DIR }}
        export DL_DIR=${{ env.DL_DIR }}
        export STAGING_DIR=${{ env.STAGING_DIR }}
        
        # Execute compile command
        timeout 4h make -j$(nproc) V=s 2>&1 | tee ${{ env.LOG_DIR }}/${{ matrix.repo_short }}-${{ env.TARGET_CHIP }}-${{ matrix.config }}.log
        
        # Check compile status
        if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "Error: Compile failed!"
            # Output error last 1000 lines log
            echo "=== Error last 1000 lines log ==="
            tail -1000 ${{ env.LOG_DIR }}/${{ matrix.repo_short }}-${{ env.TARGET_CHIP }}-${{ matrix.config }}.log
            exit 1
        fi
        
        echo "Firmware compile complete"
        
    - name: Process artifacts
      run: |
        cd ${{ env.BUILD_DIR }}
        echo "Process artifacts..."
        
        # Create temp directory
        mkdir -p ${{ env.TEMP_DIR }}/firmware ${{ env.TEMP_DIR }}/configs ${{ env.TEMP_DIR }}/logs ${{ env.TEMP_DIR }}/apps
        
        # Copy and rename firmware files
        for device in ${{ steps.devices.outputs.devices }}; do
            echo "Process device $device firmware..."
            
            # Copy factory firmware
            for factory_file in bin/targets/*/*/*-factory.bin; do
                if [[ $factory_file == *"${{ env.TARGET_CHIP }}"* && $factory_file == *"$device"* && $factory_file == *"-factory.bin"* ]]; then
                    cp "$factory_file" "${{ env.TEMP_DIR }}/firmware/${{ matrix.repo_short }}-$device-factory-${{ matrix.config }}.bin"
                    echo "Copied and renamed factory firmware: $factory_file -> ${{ matrix.repo_short }}-$device-factory-${{ matrix.config }}.bin"
                fi
            done
            
            # Copy sysupgrade firmware
            for sysupgrade_file in bin/targets/*/*/*-sysupgrade.bin; do
                if [[ $sysupgrade_file == *"${{ env.TARGET_CHIP }}"* && $sysupgrade_file == *"$device"* && $sysupgrade_file == *"-sysupgrade.bin"* ]]; then
                    cp "$sysupgrade_file" "${{ env.TEMP_DIR }}/firmware/${{ matrix.repo_short }}-$device-sysupgrade-${{ matrix.config }}.bin"
                    echo "Copied and renamed sysupgrade firmware: $sysupgrade_file -> ${{ matrix.repo_short }}-$device-sysupgrade-${{ matrix.config }}.bin"
                fi
            done
        done
        
        # Copy config related files
        cp .config "${{ env.TEMP_DIR }}/configs/${{ matrix.repo_short }}-${{ env.TARGET_CHIP }}-${{ steps.devices.outputs.devices }}-${{ matrix.config }}.config"
        cp .config.buildinfo "${{ env.TEMP_DIR }}/configs/${{ matrix.repo_short }}-${{ env.TARGET_CHIP }}-${{ steps.devices.outputs.devices }}-${{ matrix.config }}.config.buildinfo" || true
        
        # Find and copy manifest file
        find . -name "*.manifest" -exec cp {} "${{ env.TEMP_DIR }}/configs/${{ matrix.repo_short }}-${{ env.TARGET_CHIP }}-${{ steps.devices.outputs.devices }}-${{ matrix.config }}.manifest" \; || true
        
        # Copy log file
        cp ${{ env.LOG_DIR }}/${{ matrix.repo_short }}-${{ env.TARGET_CHIP }}-${{ matrix.config }}.log "${{ env.TEMP_DIR }}/logs/${{ matrix.repo_short }}-${{ env.TARGET_CHIP }}-${{ matrix.config }}.log"
        
        # Extract error and warning logs
        grep -i "error\|warning\|Error\|Warning" ${{ env.LOG_DIR }}/${{ matrix.repo_short }}-${{ env.TARGET_CHIP }}-${{ matrix.config }}.log > "${{ env.TEMP_DIR }}/logs/${{ matrix.repo_short }}-${{ env.TARGET_CHIP }}-${{ matrix.config }}-errors-warnings.log" || true
        
        # Copy packages
        if [ -d "bin/packages" ]; then
            find bin/packages -name "*.ipk" -exec cp {} ${{ env.TEMP_DIR }}/apps/ \; || true
        fi
        
        if [ -d "bin/targets" ]; then
            find bin/targets -name "*.ipk" -exec cp {} ${{ env.TEMP_DIR }}/apps/ \; || true
        fi
        
        echo "Artifacts process complete"
        
    - name: Upload firmware artifact
      uses: actions/upload-artifact@v4
      with:
        name: firmware-${{ matrix.repo_short }}-${{ matrix.config }}
        path: ${{ env.TEMP_DIR }}/firmware/
        retention-days: 7
        
    - name: Upload config artifact
      uses: actions/upload-artifact@v4
      with:
        name: configs-${{ matrix.repo_short }}-${{ matrix.config }}
        path: ${{ env.TEMP_DIR }}/configs/
        retention-days: 7
        
    - name: Upload log artifact
      uses: actions/upload-artifact@v4
      with:
        name: logs-${{ matrix.repo_short }}-${{ matrix.config }}
        path: ${{ env.TEMP_DIR }}/logs/
        retention-days: 14
        
    - name: Upload app artifact
      uses: actions/upload-artifact@v4
      with:
        name: apps-${{ matrix.repo_short }}-${{ matrix.config }}
        path: ${{ env.TEMP_DIR }}/apps/
        retention-days: 7

  release:
    needs: build
    runs-on: ubuntu-22.04
    if: always()  # Run even if build fails to ensure log publishing
    steps:
    - name: Output release info
      run: |
        echo "=== Prepare release ==="
        echo "Check all build status..."
        
    - name: Check build status
      run: |
        # Check if all builds succeeded
        BUILD_STATUS="${{ needs.build.result }}"
        echo "Build status: $BUILD_STATUS"
        
        if [ "$BUILD_STATUS" != "success" ] && [ "$BUILD_STATUS" != "skipped" ]; then
            echo "Warning: Some builds failed, but still publish logs"
            # Continue to execute log publishing steps
        fi
        
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ${{ env.TEMP_DIR }}/downloads
        
    - name: Organize release content
      run: |
        echo "Organize release content..."
        
        # Create release directory
        RELEASE_DIR="${{ env.TEMP_DIR }}/release"
        mkdir -p "$RELEASE_DIR"
        
        # Merge all firmware
        mkdir -p "$RELEASE_DIR/firmware"
        find ${{ env.TEMP_DIR }}/downloads -name "*-factory-*.bin" -exec cp {} "$RELEASE_DIR/firmware/" \; 2>/dev/null || true
        find ${{ env.TEMP_DIR }}/downloads -name "*-sysupgrade-*.bin" -exec cp {} "$RELEASE_DIR/firmware/" \; 2>/dev/null || true
        
        # Merge all config files and package
        mkdir -p "$RELEASE_DIR/configs"
        find ${{ env.TEMP_DIR }}/downloads -name "*.config" -exec cp {} "$RELEASE_DIR/configs/" \; 2>/dev/null || true
        find ${{ env.TEMP_DIR }}/downloads -name "*.config.buildinfo" -exec cp {} "$RELEASE_DIR/configs/" \; 2>/dev/null || true
        find ${{ env.TEMP_DIR }}/downloads -name "*.manifest" -exec cp {} "$RELEASE_DIR/configs/" \; 2>/dev/null || true
        tar -czf "$RELEASE_DIR/${{ env.TARGET_CHIP }}-config.tar.gz" -C "$RELEASE_DIR/configs" .
        
        # Merge all logs and package
        mkdir -p "$RELEASE_DIR/logs"
        find ${{ env.TEMP_DIR }}/downloads -name "*.log" -exec cp {} "$RELEASE_DIR/logs/" \; 2>/dev/null || true
        tar -czf "$RELEASE_DIR/${{ env.TARGET_CHIP }}-log.tar.gz" -C "$RELEASE_DIR/logs" .
        
        # Merge all apps and package
        mkdir -p "$RELEASE_DIR/apps"
        find ${{ env.TEMP_DIR }}/downloads -path "*/apps/*" -name "*.ipk" -exec cp {} "$RELEASE_DIR/apps/" \; 2>/dev/null || true
        tar -czf "$RELEASE_DIR/${{ env.TARGET_CHIP }}-app.tar.gz" -C "$RELEASE_DIR/apps" .
        
    - name: Generate release notes
      run: |
        # Generate release notes
        DATE=$(date +%Y-%m-%d)
        RELEASE_DIR="${{ env.TEMP_DIR }}/release"
        
        cat > "$RELEASE_DIR/README.md" << 'EOF'
# OpenWrt Firmware Release - $DATE

## Device Information
- Supported chip: ${{ env.TARGET_CHIP }}
- Included devices: JDCloud Arthur (jdcloud_re-ss-01), JDCloud Athena (jdcloud_re-cs-02)

## Default Settings
- Default management address: 192.168.111.1
- Default user: root
- Default password: none
- Default WIFI password: 12345678

## Firmware Version
- Kernel version: (to be extracted from buildinfo)
- Author: Mary
- Release date: $DATE

## Compile Configurations
- Ultra: Contains most packages
- Max: Contains medium packages  
- Pro: Contains basic packages (no Docker/USB/Coremark)

## Included Luci Apps
(to be extracted from config)

## File Description
- Firmware files: Factory and sysupgrade firmware for each device
- Config package: ${{ env.TARGET_CHIP }}-config.tar.gz - Contains all compile config files
- Log package: ${{ env.TARGET_CHIP }}-log.tar.gz - Contains all compile logs
- App package: ${{ env.TARGET_CHIP }}-app.tar.gz - Contains all compiled packages

EOF
        
        echo "Release notes generated"
        
    - name: Create release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.TARGET_CHIP }}-${{ github.run_number }}
        name: "${{ env.TARGET_CHIP }} Firmware-${{ github.run_number }}"
        body_path: ${{ env.TEMP_DIR }}/release/README.md
        files: |
          ${{ env.TEMP_DIR }}/release/firmware/*
          ${{ env.TEMP_DIR }}/release/${{ env.TARGET_CHIP }}-config.tar.gz
          ${{ env.TEMP_DIR }}/release/${{ env.TARGET_CHIP }}-log.tar.gz
          ${{ env.TEMP_DIR }}/release/${{ env.TARGET_CHIP }}-app.tar.gz
        draft: false
        prerelease: false
